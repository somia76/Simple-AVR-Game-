
Project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000082e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000082e  000008c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008a  0080008a  000008ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ee  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008bb  00000000  00000000  00001f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5d  00000000  00000000  000027d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00003238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  000033b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb5  00000000  00000000  000038ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004463  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 15 04 	jmp	0x82a	; 0x82a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int posXP = 0;
int posXE = 0;

int main ()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	a8 97       	sbiw	r28, 0x28	; 40
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	int timeBullet = 0;
	int posx = 0;
	int i = 0;
	bool bulletB = false;
	
	LCD_4_bit_init();
  a6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <LCD_4_bit_init>
	u8 man1[] = {0x04, 0x0A, 0x04, 0x1F, 0x14, 0x0E, 0x11, 0x00};
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	e0 e6       	ldi	r30, 0x60	; 96
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x22>
	u8 man1Die[] = {0x00, 0x00, 0x18, 0x00, 0x00, 0x0E, 0x1F, 0x1F};
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	e8 e6       	ldi	r30, 0x68	; 104
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	de 01       	movw	r26, r28
  c4:	19 96       	adiw	r26, 0x09	; 9
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x34>
	u8 man2[] = {0x04, 0x0A, 0x04, 0x1F, 0x05, 0x0E, 0x11, 0x11};
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	e0 e7       	ldi	r30, 0x70	; 112
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	de 01       	movw	r26, r28
  d6:	51 96       	adiw	r26, 0x11	; 17
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	8a 95       	dec	r24
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x46>
	u8 man2Die[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0x1F};
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	e8 e7       	ldi	r30, 0x78	; 120
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	de 01       	movw	r26, r28
  e8:	59 96       	adiw	r26, 0x19	; 25
  ea:	01 90       	ld	r0, Z+
  ec:	0d 92       	st	X+, r0
  ee:	8a 95       	dec	r24
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x58>
	u8 bullet[] = {0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00};
  f2:	8e 01       	movw	r16, r28
  f4:	0f 5d       	subi	r16, 0xDF	; 223
  f6:	1f 4f       	sbci	r17, 0xFF	; 255
  f8:	88 e0       	ldi	r24, 0x08	; 8
  fa:	f8 01       	movw	r30, r16
  fc:	11 92       	st	Z+, r1
  fe:	8a 95       	dec	r24
 100:	e9 f7       	brne	.-6      	; 0xfc <main+0x6a>
 102:	88 e1       	ldi	r24, 0x18	; 24
 104:	8b a3       	std	Y+35, r24	; 0x23

	LCD_createCustomCharacter(man1, 0);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	ce 01       	movw	r24, r28
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(man1Die, 1);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	ce 01       	movw	r24, r28
 114:	09 96       	adiw	r24, 0x09	; 9
 116:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(man2, 2);
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	ce 01       	movw	r24, r28
 11e:	41 96       	adiw	r24, 0x11	; 17
 120:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(man2Die, 3);
 124:	63 e0       	ldi	r22, 0x03	; 3
 126:	ce 01       	movw	r24, r28
 128:	49 96       	adiw	r24, 0x19	; 25
 12a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(bullet, 4);
 12e:	64 e0       	ldi	r22, 0x04	; 4
 130:	c8 01       	movw	r24, r16
 132:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_createCustomCharacter>
	
	LCD_4_bit_GoToPos(0,0);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
	LCD_4_bit_sendChar(0);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
	LCD_4_bit_GoToPos(0,15);
 148:	6f e0       	ldi	r22, 0x0F	; 15
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
	LCD_4_bit_sendChar(2); 
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
	
	BTN_init(BTN_1);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <BTN_init>
	BTN_init(BTN_2);
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <BTN_init>
	BTN_init(BTN_3);
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <BTN_init>
	BTN_init(BTN_4);
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <BTN_init>
{
	int timeEnemy = 0;
	int timeBullet = 0;
	int posx = 0;
	int i = 0;
	bool bulletB = false;
 172:	61 2c       	mov	r6, r1
int main ()
{
	int timeEnemy = 0;
	int timeBullet = 0;
	int posx = 0;
	int i = 0;
 174:	c1 2c       	mov	r12, r1
 176:	d1 2c       	mov	r13, r1

int main ()
{
	int timeEnemy = 0;
	int timeBullet = 0;
	int posx = 0;
 178:	a1 2c       	mov	r10, r1
 17a:	b1 2c       	mov	r11, r1
int posXE = 0;

int main ()
{
	int timeEnemy = 0;
	int timeBullet = 0;
 17c:	e1 2c       	mov	r14, r1
 17e:	f1 2c       	mov	r15, r1
int posXP = 0;
int posXE = 0;

int main ()
{
	int timeEnemy = 0;
 180:	00 e0       	ldi	r16, 0x00	; 0
 182:	10 e0       	ldi	r17, 0x00	; 0
	BTN_init(BTN_1);
	BTN_init(BTN_2);
	BTN_init(BTN_3);
	BTN_init(BTN_4);
	while(1){
		int x0 = BTN_read(BTN_1);
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 09 02 	call	0x412	; 0x412 <BTN_read>
 18a:	78 2e       	mov	r7, r24
		int x1 = BTN_read(BTN_2);
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 09 02 	call	0x412	; 0x412 <BTN_read>
 192:	58 2e       	mov	r5, r24
		int y = BTN_read(BTN_3);
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	0e 94 09 02 	call	0x412	; 0x412 <BTN_read>
 19a:	88 2e       	mov	r8, r24
		int start = BTN_read(BTN_4);
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	0e 94 09 02 	call	0x412	; 0x412 <BTN_read>
 1a2:	98 2e       	mov	r9, r24
		if (x0 == 0)
 1a4:	71 10       	cpse	r7, r1
 1a6:	17 c0       	rjmp	.+46     	; 0x1d6 <main+0x144>
		{
			LCD_4_bit_GoToPos(1,0);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			LCD_4_bit_sendChar(' ');
 1b4:	80 e2       	ldi	r24, 0x20	; 32
 1b6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
			LCD_4_bit_GoToPos(0,0);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			posXP = 0;
 1c6:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <posXP+0x1>
 1ca:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <posXP>
			LCD_4_bit_sendChar(0);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
 1d4:	1a c0       	rjmp	.+52     	; 0x20a <main+0x178>
		}
		else if (x1 == 0)
 1d6:	51 10       	cpse	r5, r1
 1d8:	18 c0       	rjmp	.+48     	; 0x20a <main+0x178>
		{
			LCD_4_bit_GoToPos(0,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			LCD_4_bit_sendChar(' ');
 1e6:	80 e2       	ldi	r24, 0x20	; 32
 1e8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
			LCD_4_bit_GoToPos(1,0);
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			posXP = 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <posXP+0x1>
 200:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <posXP>
			LCD_4_bit_sendChar(0);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
		}
		if (y == 0)
 20a:	81 10       	cpse	r8, r1
 20c:	06 c0       	rjmp	.+12     	; 0x21a <main+0x188>
		{
			//shoot(posXP);
			posx = posXP;
 20e:	a0 90 8c 00 	lds	r10, 0x008C	; 0x80008c <posXP>
 212:	b0 90 8d 00 	lds	r11, 0x008D	; 0x80008d <posXP+0x1>
			bulletB = true;
 216:	66 24       	eor	r6, r6
 218:	63 94       	inc	r6
		}
		
		if (start == 0)
 21a:	91 10       	cpse	r9, r1
 21c:	2b c0       	rjmp	.+86     	; 0x274 <main+0x1e2>
		{
			posXE = 0;
 21e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__data_end+0x1>
 222:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
			posXP = 0;
 226:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <posXP+0x1>
 22a:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <posXP>
			LCD_4_bit_GoToPos(posXP,0);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			LCD_4_bit_GoToPos(posXE,15);
 23a:	6f e0       	ldi	r22, 0x0F	; 15
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
 242:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
 246:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			LCD_4_bit_sendChar(0);
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
			LCD_4_bit_sendChar(2);
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
			bulletB = false;
			timeBullet = 0;
			timeEnemy = 0;
			LCD_4_bit_GoToPos(0,6);
 256:	66 e0       	ldi	r22, 0x06	; 6
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			LCD_4_bit_sendString("    ");
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_4_bit_sendString>
			posXP = 0;
			LCD_4_bit_GoToPos(posXP,0);
			LCD_4_bit_GoToPos(posXE,15);
			LCD_4_bit_sendChar(0);
			LCD_4_bit_sendChar(2);
			bulletB = false;
 26a:	61 2c       	mov	r6, r1
			timeBullet = 0;
 26c:	e1 2c       	mov	r14, r1
 26e:	f1 2c       	mov	r15, r1
			timeEnemy = 0;
 270:	00 e0       	ldi	r16, 0x00	; 0
 272:	10 e0       	ldi	r17, 0x00	; 0
			LCD_4_bit_GoToPos(0,6);
			LCD_4_bit_sendString("    ");
		}
		
		if (bulletB == true)
 274:	66 20       	and	r6, r6
 276:	09 f4       	brne	.+2      	; 0x27a <main+0x1e8>
 278:	53 c0       	rjmp	.+166    	; 0x320 <main+0x28e>
		{
			if(i < 14 && timeBullet == 1500){
 27a:	fe e0       	ldi	r31, 0x0E	; 14
 27c:	cf 16       	cp	r12, r31
 27e:	d1 04       	cpc	r13, r1
 280:	ec f4       	brge	.+58     	; 0x2bc <main+0x22a>
 282:	2c ed       	ldi	r18, 0xDC	; 220
 284:	e2 16       	cp	r14, r18
 286:	25 e0       	ldi	r18, 0x05	; 5
 288:	f2 06       	cpc	r15, r18
 28a:	c1 f4       	brne	.+48     	; 0x2bc <main+0x22a>
				i++;
 28c:	46 01       	movw	r8, r12
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	88 1a       	sub	r8, r24
 292:	98 0a       	sbc	r9, r24
				LCD_4_bit_GoToPos(posx,i);
 294:	b4 01       	movw	r22, r8
 296:	c5 01       	movw	r24, r10
 298:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
				LCD_4_bit_sendChar(4);
 29c:	84 e0       	ldi	r24, 0x04	; 4
 29e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
				if(i != 1 ) {
 2a2:	e1 e0       	ldi	r30, 0x01	; 1
 2a4:	8e 16       	cp	r8, r30
 2a6:	91 04       	cpc	r9, r1
 2a8:	b1 f1       	breq	.+108    	; 0x316 <main+0x284>
					LCD_4_bit_GoToPos(posx,i-1);
 2aa:	b6 01       	movw	r22, r12
 2ac:	c5 01       	movw	r24, r10
 2ae:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
					LCD_4_bit_sendChar(' ');
 2b2:	80 e2       	ldi	r24, 0x20	; 32
 2b4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
		}
		
		if (bulletB == true)
		{
			if(i < 14 && timeBullet == 1500){
				i++;
 2b8:	64 01       	movw	r12, r8
 2ba:	32 c0       	rjmp	.+100    	; 0x320 <main+0x28e>
				LCD_4_bit_sendChar(4);
				if(i != 1 ) {
					LCD_4_bit_GoToPos(posx,i-1);
					LCD_4_bit_sendChar(' ');
				}
			}else if(i == 14){
 2bc:	fe e0       	ldi	r31, 0x0E	; 14
 2be:	cf 16       	cp	r12, r31
 2c0:	d1 04       	cpc	r13, r1
 2c2:	29 f5       	brne	.+74     	; 0x30e <main+0x27c>
				i++;
				LCD_4_bit_GoToPos(posx,i-1);
 2c4:	b6 01       	movw	r22, r12
 2c6:	c5 01       	movw	r24, r10
 2c8:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
				LCD_4_bit_sendChar(' ');
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
				if(posx == posXE){
 2d2:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
 2d6:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
 2da:	a8 16       	cp	r10, r24
 2dc:	b9 06       	cpc	r11, r25
 2de:	e9 f4       	brne	.+58     	; 0x31a <main+0x288>
					 LCD_4_bit_sendChar(3);
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
					 LCD_4_bit_GoToPos(0,6);
 2e6:	66 e0       	ldi	r22, 0x06	; 6
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
					 LCD_4_bit_sendString(">Win");
 2f2:	85 e8       	ldi	r24, 0x85	; 133
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_4_bit_sendString>
					 posXE = 2;
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__data_end+0x1>
 302:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
				}
				i = 0;
				bulletB = false;
 306:	61 2c       	mov	r6, r1
					 LCD_4_bit_sendChar(3);
					 LCD_4_bit_GoToPos(0,6);
					 LCD_4_bit_sendString(">Win");
					 posXE = 2;
				}
				i = 0;
 308:	c1 2c       	mov	r12, r1
 30a:	d1 2c       	mov	r13, r1
 30c:	09 c0       	rjmp	.+18     	; 0x320 <main+0x28e>
				bulletB = false;
			}else{
				timeBullet++;
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	e2 1a       	sub	r14, r18
 312:	f2 0a       	sbc	r15, r18
 314:	05 c0       	rjmp	.+10     	; 0x320 <main+0x28e>
		}
		
		if (bulletB == true)
		{
			if(i < 14 && timeBullet == 1500){
				i++;
 316:	64 01       	movw	r12, r8
 318:	03 c0       	rjmp	.+6      	; 0x320 <main+0x28e>
					 LCD_4_bit_GoToPos(0,6);
					 LCD_4_bit_sendString(">Win");
					 posXE = 2;
				}
				i = 0;
				bulletB = false;
 31a:	61 2c       	mov	r6, r1
					 LCD_4_bit_sendChar(3);
					 LCD_4_bit_GoToPos(0,6);
					 LCD_4_bit_sendString(">Win");
					 posXE = 2;
				}
				i = 0;
 31c:	c1 2c       	mov	r12, r1
 31e:	d1 2c       	mov	r13, r1
			}else{
				timeBullet++;
			}
		}
		
		if(posXE == 0 && timeEnemy == 1000){
 320:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
 324:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__data_end+0x1>
 328:	00 97       	sbiw	r24, 0x00	; 0
 32a:	d9 f4       	brne	.+54     	; 0x362 <main+0x2d0>
 32c:	08 3e       	cpi	r16, 0xE8	; 232
 32e:	e3 e0       	ldi	r30, 0x03	; 3
 330:	1e 07       	cpc	r17, r30
 332:	b9 f4       	brne	.+46     	; 0x362 <main+0x2d0>
			LCD_4_bit_GoToPos(posXE,15);
 334:	6f e0       	ldi	r22, 0x0F	; 15
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			LCD_4_bit_sendChar(' ');
 33c:	80 e2       	ldi	r24, 0x20	; 32
 33e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
			posXE = 1;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__data_end+0x1>
 34a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end>
			LCD_4_bit_GoToPos(posXE,15);
 34e:	6f e0       	ldi	r22, 0x0F	; 15
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			LCD_4_bit_sendChar(2);
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
			timeEnemy = 0;
 35c:	00 e0       	ldi	r16, 0x00	; 0
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	11 cf       	rjmp	.-478    	; 0x184 <main+0xf2>
		}else if(posXE == 1 && timeEnemy == 1000){
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	91 05       	cpc	r25, r1
 366:	d9 f4       	brne	.+54     	; 0x39e <main+0x30c>
 368:	08 3e       	cpi	r16, 0xE8	; 232
 36a:	f3 e0       	ldi	r31, 0x03	; 3
 36c:	1f 07       	cpc	r17, r31
 36e:	b9 f4       	brne	.+46     	; 0x39e <main+0x30c>
			LCD_4_bit_GoToPos(posXE,15);
 370:	6f e0       	ldi	r22, 0x0F	; 15
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			LCD_4_bit_sendChar(' ');
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
			posXE = 0;
 37e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__data_end+0x1>
 382:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
			LCD_4_bit_GoToPos(posXE,15);
 386:	6f e0       	ldi	r22, 0x0F	; 15
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_4_bit_GoToPos>
			LCD_4_bit_sendChar(2);
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
			timeEnemy = 0;
 398:	00 e0       	ldi	r16, 0x00	; 0
 39a:	10 e0       	ldi	r17, 0x00	; 0
 39c:	f3 ce       	rjmp	.-538    	; 0x184 <main+0xf2>
		}else{
			timeEnemy ++;
 39e:	0f 5f       	subi	r16, 0xFF	; 255
 3a0:	1f 4f       	sbci	r17, 0xFF	; 255
 3a2:	f0 ce       	rjmp	.-544    	; 0x184 <main+0xf2>

000003a4 <BTN_init>:
#include "button.h"


void BTN_init  (u8 btnNum)
{
	switch(btnNum)
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	a1 f0       	breq	.+40     	; 0x3d0 <BTN_init+0x2c>
 3a8:	18 f4       	brcc	.+6      	; 0x3b0 <BTN_init+0xc>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	31 f0       	breq	.+12     	; 0x3ba <BTN_init+0x16>
 3ae:	08 95       	ret
 3b0:	83 30       	cpi	r24, 0x03	; 3
 3b2:	c9 f0       	breq	.+50     	; 0x3e6 <BTN_init+0x42>
 3b4:	84 30       	cpi	r24, 0x04	; 4
 3b6:	11 f1       	breq	.+68     	; 0x3fc <BTN_init+0x58>
 3b8:	08 95       	ret
	{
		case 1:
			DIO_init (BTN_1_PORT, BTN_1_PIN, IN);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	84 e4       	ldi	r24, 0x44	; 68
 3c0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DIO_init>
			DIO_write(BTN_1_PORT, BTN_1_PIN, LOW);
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	84 e4       	ldi	r24, 0x44	; 68
 3ca:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <DIO_write>
			break;
 3ce:	08 95       	ret
		case 2:
			DIO_init (BTN_2_PORT, BTN_2_PIN, IN);
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	84 e4       	ldi	r24, 0x44	; 68
 3d6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DIO_init>
			DIO_write(BTN_2_PORT, BTN_2_PIN, LOW);
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	84 e4       	ldi	r24, 0x44	; 68
 3e0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <DIO_write>
			break;
 3e4:	08 95       	ret
		case 3:
			DIO_init (BTN_3_PORT, BTN_3_PIN, IN);
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	62 e0       	ldi	r22, 0x02	; 2
 3ea:	84 e4       	ldi	r24, 0x44	; 68
 3ec:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DIO_init>
			DIO_write(BTN_3_PORT, BTN_3_PIN, LOW);
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	62 e0       	ldi	r22, 0x02	; 2
 3f4:	84 e4       	ldi	r24, 0x44	; 68
 3f6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <DIO_write>
			break;
 3fa:	08 95       	ret
		case 4:
			DIO_init (BTN_4_PORT, BTN_4_PIN, IN);
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	84 e4       	ldi	r24, 0x44	; 68
 402:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <DIO_init>
			DIO_write(BTN_4_PORT, BTN_4_PIN, LOW);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	63 e0       	ldi	r22, 0x03	; 3
 40a:	84 e4       	ldi	r24, 0x44	; 68
 40c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <DIO_write>
 410:	08 95       	ret

00000412 <BTN_read>:
}

u8   BTN_read  (u8 btnNum)
{
	u8 btnValue = 0;
	switch(btnNum)
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	71 f0       	breq	.+28     	; 0x432 <BTN_read+0x20>
 416:	18 f4       	brcc	.+6      	; 0x41e <BTN_read+0xc>
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	31 f0       	breq	.+12     	; 0x428 <BTN_read+0x16>
 41c:	19 c0       	rjmp	.+50     	; 0x450 <BTN_read+0x3e>
 41e:	83 30       	cpi	r24, 0x03	; 3
 420:	69 f0       	breq	.+26     	; 0x43c <BTN_read+0x2a>
 422:	84 30       	cpi	r24, 0x04	; 4
 424:	81 f0       	breq	.+32     	; 0x446 <BTN_read+0x34>
 426:	14 c0       	rjmp	.+40     	; 0x450 <BTN_read+0x3e>
	{
		case 1:
			btnValue = DIO_read(BTN_1_PORT, BTN_1_PIN);
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	84 e4       	ldi	r24, 0x44	; 68
 42c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_read>
			break;
 430:	08 95       	ret
		case 2:
			btnValue = DIO_read(BTN_2_PORT, BTN_2_PIN);
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	84 e4       	ldi	r24, 0x44	; 68
 436:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_read>
			break;
 43a:	08 95       	ret
		case 3:
			btnValue = DIO_read(BTN_3_PORT, BTN_3_PIN);
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	84 e4       	ldi	r24, 0x44	; 68
 440:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_read>
			break;
 444:	08 95       	ret
		case 4:
			btnValue = DIO_read(BTN_4_PORT, BTN_4_PIN);
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	84 e4       	ldi	r24, 0x44	; 68
 44a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_read>
			break;
 44e:	08 95       	ret
	}
}

u8   BTN_read  (u8 btnNum)
{
	u8 btnValue = 0;
 450:	80 e0       	ldi	r24, 0x00	; 0
		default:
			// ERR
			break;
	}
	return btnValue;
}
 452:	08 95       	ret

00000454 <LCD_4_bit_sendCMD>:

}

void LCD_4_bit_sendCMD (u8 cmnd)
{
	LCD_DATA_PORT = cmnd;
 454:	88 bb       	out	0x18, r24	; 24

	LCD_CMD_PORT &= ~(1<<RS);	/* RS=O command register */
 456:	9b b3       	in	r25, 0x1b	; 27
 458:	9d 7f       	andi	r25, 0xFD	; 253
 45a:	9b bb       	out	0x1b, r25	; 27
	LCD_CMD_PORT &= ~(1<<RW);	/* RW=0 Write operation */
 45c:	9b b3       	in	r25, 0x1b	; 27
 45e:	9b 7f       	andi	r25, 0xFB	; 251
 460:	9b bb       	out	0x1b, r25	; 27

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
 462:	9b b3       	in	r25, 0x1b	; 27
 464:	98 60       	ori	r25, 0x08	; 8
 466:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 468:	e9 ef       	ldi	r30, 0xF9	; 249
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_4_bit_sendCMD+0x18>
 470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_4_bit_sendCMD+0x1e>
 472:	00 00       	nop
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
 474:	9b b3       	in	r25, 0x1b	; 27
 476:	97 7f       	andi	r25, 0xF7	; 247
 478:	9b bb       	out	0x1b, r25	; 27
 47a:	e1 ee       	ldi	r30, 0xE1	; 225
 47c:	f4 e0       	ldi	r31, 0x04	; 4
 47e:	31 97       	sbiw	r30, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <LCD_4_bit_sendCMD+0x2a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_4_bit_sendCMD+0x30>
 484:	00 00       	nop

	_delay_ms(5);

	LCD_DATA_PORT = ((cmnd << 4) & 0xF0);
 486:	f0 e1       	ldi	r31, 0x10	; 16
 488:	8f 9f       	mul	r24, r31
 48a:	c0 01       	movw	r24, r0
 48c:	11 24       	eor	r1, r1
 48e:	88 bb       	out	0x18, r24	; 24

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
 490:	8b b3       	in	r24, 0x1b	; 27
 492:	88 60       	ori	r24, 0x08	; 8
 494:	8b bb       	out	0x1b, r24	; 27
 496:	89 ef       	ldi	r24, 0xF9	; 249
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <LCD_4_bit_sendCMD+0x46>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <LCD_4_bit_sendCMD+0x4c>
 4a0:	00 00       	nop
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
 4a2:	8b b3       	in	r24, 0x1b	; 27
 4a4:	87 7f       	andi	r24, 0xF7	; 247
 4a6:	8b bb       	out	0x1b, r24	; 27
 4a8:	e1 ee       	ldi	r30, 0xE1	; 225
 4aa:	f4 e0       	ldi	r31, 0x04	; 4
 4ac:	31 97       	sbiw	r30, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCD_4_bit_sendCMD+0x58>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCD_4_bit_sendCMD+0x5e>
 4b2:	00 00       	nop
 4b4:	08 95       	ret

000004b6 <LCD_4_bit_init>:
#include "LCD.h"

void LCD_4_bit_init (void) 		/* LCD 8-bit Mode Initialize function */
{

	LCD_CMD_PORT_DIR = 0xFF;		/* Make LCD command port direction as o/p */
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	8a bb       	out	0x1a, r24	; 26
	LCD_DATA_PORT_DIR = 0xFF;		/* Make LCD data port direction as o/p */
 4ba:	87 bb       	out	0x17, r24	; 23
 4bc:	87 e8       	ldi	r24, 0x87	; 135
 4be:	93 e1       	ldi	r25, 0x13	; 19
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <LCD_4_bit_init+0xa>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <LCD_4_bit_init+0x10>
 4c6:	00 00       	nop

	_delay_ms(20);					/* LCD Power ON delay always >15ms */

	LCD_4_bit_sendCMD(0x02);		/* Initialization of 16X2 LCD in 8bit mode */
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_4_bit_sendCMD>
	LCD_4_bit_sendCMD(0x28);
 4ce:	88 e2       	ldi	r24, 0x28	; 40
 4d0:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_4_bit_sendCMD>
	LCD_4_bit_sendCMD(0x0C);		/* Display ON Cursor OFF */
 4d4:	8c e0       	ldi	r24, 0x0C	; 12
 4d6:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_4_bit_sendCMD>
	LCD_4_bit_sendCMD(0x06);		/* Auto Increment cursor */
 4da:	86 e0       	ldi	r24, 0x06	; 6
 4dc:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_4_bit_sendCMD>
	LCD_4_bit_sendCMD(0x01);		/* clear display */
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_4_bit_sendCMD>
 4e6:	83 ef       	ldi	r24, 0xF3	; 243
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_4_bit_init+0x34>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_4_bit_init+0x3a>
 4f0:	00 00       	nop

	_delay_ms(2);					/* Clear display command delay> 1.63 ms */

	LCD_4_bit_sendCMD(0x80);		/* cursor at home position */
 4f2:	80 e8       	ldi	r24, 0x80	; 128
 4f4:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_4_bit_sendCMD>
 4f8:	08 95       	ret

000004fa <LCD_4_bit_sendChar>:
	_delay_ms(5);
}

void LCD_4_bit_sendChar (u8 charData)
{
	LCD_DATA_PORT = charData;
 4fa:	88 bb       	out	0x18, r24	; 24
	
	LCD_CMD_PORT |= (1<<RS);	/* RS=1 data register */
 4fc:	9b b3       	in	r25, 0x1b	; 27
 4fe:	92 60       	ori	r25, 0x02	; 2
 500:	9b bb       	out	0x1b, r25	; 27
	LCD_CMD_PORT &= ~(1<<RW);	/* RW=0 Write operation */
 502:	9b b3       	in	r25, 0x1b	; 27
 504:	9b 7f       	andi	r25, 0xFB	; 251
 506:	9b bb       	out	0x1b, r25	; 27

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
 508:	9b b3       	in	r25, 0x1b	; 27
 50a:	98 60       	ori	r25, 0x08	; 8
 50c:	9b bb       	out	0x1b, r25	; 27
 50e:	e9 ef       	ldi	r30, 0xF9	; 249
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <LCD_4_bit_sendChar+0x18>
 516:	00 c0       	rjmp	.+0      	; 0x518 <LCD_4_bit_sendChar+0x1e>
 518:	00 00       	nop
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
 51a:	9b b3       	in	r25, 0x1b	; 27
 51c:	97 7f       	andi	r25, 0xF7	; 247
 51e:	9b bb       	out	0x1b, r25	; 27
 520:	e1 ee       	ldi	r30, 0xE1	; 225
 522:	f4 e0       	ldi	r31, 0x04	; 4
 524:	31 97       	sbiw	r30, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <LCD_4_bit_sendChar+0x2a>
 528:	00 c0       	rjmp	.+0      	; 0x52a <LCD_4_bit_sendChar+0x30>
 52a:	00 00       	nop
	
	_delay_ms(5);

	LCD_DATA_PORT = ((charData << 4) & 0xF0);
 52c:	f0 e1       	ldi	r31, 0x10	; 16
 52e:	8f 9f       	mul	r24, r31
 530:	c0 01       	movw	r24, r0
 532:	11 24       	eor	r1, r1
 534:	88 bb       	out	0x18, r24	; 24

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
 536:	8b b3       	in	r24, 0x1b	; 27
 538:	88 60       	ori	r24, 0x08	; 8
 53a:	8b bb       	out	0x1b, r24	; 27
 53c:	89 ef       	ldi	r24, 0xF9	; 249
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCD_4_bit_sendChar+0x46>
 544:	00 c0       	rjmp	.+0      	; 0x546 <LCD_4_bit_sendChar+0x4c>
 546:	00 00       	nop
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
 548:	8b b3       	in	r24, 0x1b	; 27
 54a:	87 7f       	andi	r24, 0xF7	; 247
 54c:	8b bb       	out	0x1b, r24	; 27
 54e:	e1 ee       	ldi	r30, 0xE1	; 225
 550:	f4 e0       	ldi	r31, 0x04	; 4
 552:	31 97       	sbiw	r30, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <LCD_4_bit_sendChar+0x58>
 556:	00 c0       	rjmp	.+0      	; 0x558 <LCD_4_bit_sendChar+0x5e>
 558:	00 00       	nop
 55a:	08 95       	ret

0000055c <LCD_4_bit_sendString>:
	_delay_ms(5);

}

void LCD_4_bit_sendString (u8 *str)
{
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	8c 01       	movw	r16, r24
	u8 i = 0;
	for (i = 0; str[i] != 0; i++)
 564:	c0 e0       	ldi	r28, 0x00	; 0
 566:	03 c0       	rjmp	.+6      	; 0x56e <LCD_4_bit_sendString+0x12>
	{
		LCD_4_bit_sendChar(str[i]);
 568:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
}

void LCD_4_bit_sendString (u8 *str)
{
	u8 i = 0;
	for (i = 0; str[i] != 0; i++)
 56c:	cf 5f       	subi	r28, 0xFF	; 255
 56e:	f8 01       	movw	r30, r16
 570:	ec 0f       	add	r30, r28
 572:	f1 1d       	adc	r31, r1
 574:	80 81       	ld	r24, Z
 576:	81 11       	cpse	r24, r1
 578:	f7 cf       	rjmp	.-18     	; 0x568 <LCD_4_bit_sendString+0xc>
	{
		LCD_4_bit_sendChar(str[i]);
	}
}
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	08 95       	ret

00000582 <LCD_4_bit_GoToPos>:

void LCD_4_bit_GoToPos (u8 row, u8 col)
{
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	00 d0       	rcall	.+0      	; 0x588 <LCD_4_bit_GoToPos+0x6>
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
	u8 Loc[2] = {0x80 , 0xc0};
 58c:	90 e8       	ldi	r25, 0x80	; 128
 58e:	99 83       	std	Y+1, r25	; 0x01
 590:	90 ec       	ldi	r25, 0xC0	; 192
 592:	9a 83       	std	Y+2, r25	; 0x02
	LCD_4_bit_sendCMD(Loc[row]+col);
 594:	e1 e0       	ldi	r30, 0x01	; 1
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	ec 0f       	add	r30, r28
 59a:	fd 1f       	adc	r31, r29
 59c:	e8 0f       	add	r30, r24
 59e:	f1 1d       	adc	r31, r1
 5a0:	80 81       	ld	r24, Z
 5a2:	86 0f       	add	r24, r22
 5a4:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_4_bit_sendCMD>
}
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	08 95       	ret

000005b2 <LCD_createCustomCharacter>:

void LCD_createCustomCharacter (u8 *pattern, u8 location)
{
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	cf 93       	push	r28
 5b8:	8c 01       	movw	r16, r24
	u8 i = 0;

	LCD_4_bit_sendCMD(0x40 + (location * 8));	/* Send the Address of CGRAM */
 5ba:	86 2f       	mov	r24, r22
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	08 96       	adiw	r24, 0x08	; 8
 5c0:	88 0f       	add	r24, r24
 5c2:	88 0f       	add	r24, r24
 5c4:	88 0f       	add	r24, r24
 5c6:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_4_bit_sendCMD>

	for(i = 0; i < 8; i++)
 5ca:	c0 e0       	ldi	r28, 0x00	; 0
 5cc:	07 c0       	rjmp	.+14     	; 0x5dc <LCD_createCustomCharacter+0x2a>
	{
		LCD_4_bit_sendChar(pattern[i]);			/* Pass the Bytes of pattern on LCD */
 5ce:	f8 01       	movw	r30, r16
 5d0:	ec 0f       	add	r30, r28
 5d2:	f1 1d       	adc	r31, r1
 5d4:	80 81       	ld	r24, Z
 5d6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_4_bit_sendChar>
{
	u8 i = 0;

	LCD_4_bit_sendCMD(0x40 + (location * 8));	/* Send the Address of CGRAM */

	for(i = 0; i < 8; i++)
 5da:	cf 5f       	subi	r28, 0xFF	; 255
 5dc:	c8 30       	cpi	r28, 0x08	; 8
 5de:	b8 f3       	brcs	.-18     	; 0x5ce <LCD_createCustomCharacter+0x1c>
	{
		LCD_4_bit_sendChar(pattern[i]);			/* Pass the Bytes of pattern on LCD */
	}
}
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	08 95       	ret

000005e8 <DIO_init>:
			break;
		case PORT_C:
			TOG_BIT(PORTC, pinNumber);
			break;
		case PORT_D:
			TOG_BIT(PORTD, pinNumber);
 5e8:	82 34       	cpi	r24, 0x42	; 66
 5ea:	29 f1       	breq	.+74     	; 0x636 <DIO_init+0x4e>
 5ec:	18 f4       	brcc	.+6      	; 0x5f4 <DIO_init+0xc>
 5ee:	81 34       	cpi	r24, 0x41	; 65
 5f0:	39 f0       	breq	.+14     	; 0x600 <DIO_init+0x18>
 5f2:	08 95       	ret
 5f4:	83 34       	cpi	r24, 0x43	; 67
 5f6:	d1 f1       	breq	.+116    	; 0x66c <DIO_init+0x84>
 5f8:	84 34       	cpi	r24, 0x44	; 68
 5fa:	09 f4       	brne	.+2      	; 0x5fe <DIO_init+0x16>
 5fc:	52 c0       	rjmp	.+164    	; 0x6a2 <DIO_init+0xba>
 5fe:	08 95       	ret
 600:	41 30       	cpi	r20, 0x01	; 1
 602:	59 f4       	brne	.+22     	; 0x61a <DIO_init+0x32>
 604:	2a b3       	in	r18, 0x1a	; 26
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_init+0x28>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_init+0x24>
 614:	82 2b       	or	r24, r18
 616:	8a bb       	out	0x1a, r24	; 26
 618:	08 95       	ret
 61a:	41 11       	cpse	r20, r1
 61c:	5c c0       	rjmp	.+184    	; 0x6d6 <DIO_init+0xee>
 61e:	2a b3       	in	r18, 0x1a	; 26
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_init+0x42>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_init+0x3e>
 62e:	80 95       	com	r24
 630:	82 23       	and	r24, r18
 632:	8a bb       	out	0x1a, r24	; 26
 634:	08 95       	ret
 636:	41 30       	cpi	r20, 0x01	; 1
 638:	59 f4       	brne	.+22     	; 0x650 <DIO_init+0x68>
 63a:	27 b3       	in	r18, 0x17	; 23
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_init+0x5e>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_init+0x5a>
 64a:	82 2b       	or	r24, r18
 64c:	87 bb       	out	0x17, r24	; 23
 64e:	08 95       	ret
 650:	41 11       	cpse	r20, r1
 652:	41 c0       	rjmp	.+130    	; 0x6d6 <DIO_init+0xee>
 654:	27 b3       	in	r18, 0x17	; 23
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_init+0x78>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_init+0x74>
 664:	80 95       	com	r24
 666:	82 23       	and	r24, r18
 668:	87 bb       	out	0x17, r24	; 23
 66a:	08 95       	ret
 66c:	41 30       	cpi	r20, 0x01	; 1
 66e:	59 f4       	brne	.+22     	; 0x686 <DIO_init+0x9e>
 670:	24 b3       	in	r18, 0x14	; 20
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_init+0x94>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	6a 95       	dec	r22
 67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_init+0x90>
 680:	82 2b       	or	r24, r18
 682:	84 bb       	out	0x14, r24	; 20
 684:	08 95       	ret
 686:	41 11       	cpse	r20, r1
 688:	26 c0       	rjmp	.+76     	; 0x6d6 <DIO_init+0xee>
 68a:	24 b3       	in	r18, 0x14	; 20
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	02 c0       	rjmp	.+4      	; 0x696 <DIO_init+0xae>
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	6a 95       	dec	r22
 698:	e2 f7       	brpl	.-8      	; 0x692 <DIO_init+0xaa>
 69a:	80 95       	com	r24
 69c:	82 23       	and	r24, r18
 69e:	84 bb       	out	0x14, r24	; 20
 6a0:	08 95       	ret
 6a2:	41 30       	cpi	r20, 0x01	; 1
 6a4:	59 f4       	brne	.+22     	; 0x6bc <DIO_init+0xd4>
 6a6:	21 b3       	in	r18, 0x11	; 17
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <DIO_init+0xca>
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	6a 95       	dec	r22
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <DIO_init+0xc6>
 6b6:	82 2b       	or	r24, r18
 6b8:	81 bb       	out	0x11, r24	; 17
 6ba:	08 95       	ret
 6bc:	41 11       	cpse	r20, r1
 6be:	0b c0       	rjmp	.+22     	; 0x6d6 <DIO_init+0xee>
 6c0:	21 b3       	in	r18, 0x11	; 17
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_init+0xe4>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_init+0xe0>
 6d0:	80 95       	com	r24
 6d2:	82 23       	and	r24, r18
 6d4:	81 bb       	out	0x11, r24	; 17
 6d6:	08 95       	ret

000006d8 <DIO_write>:
 6d8:	82 34       	cpi	r24, 0x42	; 66
 6da:	29 f1       	breq	.+74     	; 0x726 <DIO_write+0x4e>
 6dc:	18 f4       	brcc	.+6      	; 0x6e4 <DIO_write+0xc>
 6de:	81 34       	cpi	r24, 0x41	; 65
 6e0:	39 f0       	breq	.+14     	; 0x6f0 <DIO_write+0x18>
 6e2:	08 95       	ret
 6e4:	83 34       	cpi	r24, 0x43	; 67
 6e6:	d1 f1       	breq	.+116    	; 0x75c <DIO_write+0x84>
 6e8:	84 34       	cpi	r24, 0x44	; 68
 6ea:	09 f4       	brne	.+2      	; 0x6ee <DIO_write+0x16>
 6ec:	52 c0       	rjmp	.+164    	; 0x792 <DIO_write+0xba>
 6ee:	08 95       	ret
 6f0:	41 30       	cpi	r20, 0x01	; 1
 6f2:	59 f4       	brne	.+22     	; 0x70a <DIO_write+0x32>
 6f4:	2b b3       	in	r18, 0x1b	; 27
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO_write+0x28>
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	6a 95       	dec	r22
 702:	e2 f7       	brpl	.-8      	; 0x6fc <DIO_write+0x24>
 704:	82 2b       	or	r24, r18
 706:	8b bb       	out	0x1b, r24	; 27
 708:	08 95       	ret
 70a:	41 11       	cpse	r20, r1
 70c:	5c c0       	rjmp	.+184    	; 0x7c6 <DIO_write+0xee>
 70e:	2b b3       	in	r18, 0x1b	; 27
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_write+0x42>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_write+0x3e>
 71e:	80 95       	com	r24
 720:	82 23       	and	r24, r18
 722:	8b bb       	out	0x1b, r24	; 27
 724:	08 95       	ret
 726:	41 30       	cpi	r20, 0x01	; 1
 728:	59 f4       	brne	.+22     	; 0x740 <DIO_write+0x68>
 72a:	28 b3       	in	r18, 0x18	; 24
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_write+0x5e>
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	6a 95       	dec	r22
 738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_write+0x5a>
 73a:	82 2b       	or	r24, r18
 73c:	88 bb       	out	0x18, r24	; 24
 73e:	08 95       	ret
 740:	41 11       	cpse	r20, r1
 742:	41 c0       	rjmp	.+130    	; 0x7c6 <DIO_write+0xee>
 744:	28 b3       	in	r18, 0x18	; 24
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_write+0x78>
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	6a 95       	dec	r22
 752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_write+0x74>
 754:	80 95       	com	r24
 756:	82 23       	and	r24, r18
 758:	88 bb       	out	0x18, r24	; 24
 75a:	08 95       	ret
 75c:	41 30       	cpi	r20, 0x01	; 1
 75e:	59 f4       	brne	.+22     	; 0x776 <DIO_write+0x9e>
 760:	25 b3       	in	r18, 0x15	; 21
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_write+0x94>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	6a 95       	dec	r22
 76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_write+0x90>
 770:	82 2b       	or	r24, r18
 772:	85 bb       	out	0x15, r24	; 21
 774:	08 95       	ret
 776:	41 11       	cpse	r20, r1
 778:	26 c0       	rjmp	.+76     	; 0x7c6 <DIO_write+0xee>
 77a:	25 b3       	in	r18, 0x15	; 21
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_write+0xae>
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	6a 95       	dec	r22
 788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_write+0xaa>
 78a:	80 95       	com	r24
 78c:	82 23       	and	r24, r18
 78e:	85 bb       	out	0x15, r24	; 21
 790:	08 95       	ret
 792:	41 30       	cpi	r20, 0x01	; 1
 794:	59 f4       	brne	.+22     	; 0x7ac <DIO_write+0xd4>
 796:	22 b3       	in	r18, 0x12	; 18
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_write+0xca>
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	6a 95       	dec	r22
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_write+0xc6>
 7a6:	82 2b       	or	r24, r18
 7a8:	82 bb       	out	0x12, r24	; 18
 7aa:	08 95       	ret
 7ac:	41 11       	cpse	r20, r1
 7ae:	0b c0       	rjmp	.+22     	; 0x7c6 <DIO_write+0xee>
 7b0:	22 b3       	in	r18, 0x12	; 18
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_write+0xe4>
 7b8:	88 0f       	add	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	6a 95       	dec	r22
 7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_write+0xe0>
 7c0:	80 95       	com	r24
 7c2:	82 23       	and	r24, r18
 7c4:	82 bb       	out	0x12, r24	; 18
 7c6:	08 95       	ret

000007c8 <DIO_read>:
}

u8   DIO_read (u8 portNumber, u8 pinNumber)
{
	u8 pinValue = 0;
	switch (portNumber)
 7c8:	82 34       	cpi	r24, 0x42	; 66
 7ca:	91 f0       	breq	.+36     	; 0x7f0 <DIO_read+0x28>
 7cc:	18 f4       	brcc	.+6      	; 0x7d4 <DIO_read+0xc>
 7ce:	81 34       	cpi	r24, 0x41	; 65
 7d0:	31 f0       	breq	.+12     	; 0x7de <DIO_read+0x16>
 7d2:	29 c0       	rjmp	.+82     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7d4:	83 34       	cpi	r24, 0x43	; 67
 7d6:	a9 f0       	breq	.+42     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7d8:	84 34       	cpi	r24, 0x44	; 68
 7da:	e1 f0       	breq	.+56     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7dc:	24 c0       	rjmp	.+72     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
	{
		case PORT_A:
			pinValue = GET_BIT(PINA, pinNumber);
 7de:	89 b3       	in	r24, 0x19	; 25
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_read+0x20>
 7e4:	95 95       	asr	r25
 7e6:	87 95       	ror	r24
 7e8:	6a 95       	dec	r22
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_read+0x1c>
 7ec:	81 70       	andi	r24, 0x01	; 1
			break;
 7ee:	08 95       	ret
		case PORT_B:
			pinValue = GET_BIT(PINB, pinNumber);
 7f0:	86 b3       	in	r24, 0x16	; 22
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_read+0x32>
 7f6:	95 95       	asr	r25
 7f8:	87 95       	ror	r24
 7fa:	6a 95       	dec	r22
 7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_read+0x2e>
 7fe:	81 70       	andi	r24, 0x01	; 1
			break;
 800:	08 95       	ret
		case PORT_C:
			pinValue = GET_BIT(PINC, pinNumber);
 802:	83 b3       	in	r24, 0x13	; 19
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	95 95       	asr	r25
 80a:	87 95       	ror	r24
 80c:	6a 95       	dec	r22
 80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 810:	81 70       	andi	r24, 0x01	; 1
			break;
 812:	08 95       	ret
		case PORT_D:
			pinValue = GET_BIT(PIND, pinNumber);
 814:	80 b3       	in	r24, 0x10	; 16
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	02 c0       	rjmp	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	95 95       	asr	r25
 81c:	87 95       	ror	r24
 81e:	6a 95       	dec	r22
 820:	e2 f7       	brpl	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 822:	81 70       	andi	r24, 0x01	; 1
			break;
 824:	08 95       	ret
	}
}

u8   DIO_read (u8 portNumber, u8 pinNumber)
{
	u8 pinValue = 0;
 826:	80 e0       	ldi	r24, 0x00	; 0
		default:
			// ERR
			break;
	}
	return pinValue;
}
 828:	08 95       	ret

0000082a <_exit>:
 82a:	f8 94       	cli

0000082c <__stop_program>:
 82c:	ff cf       	rjmp	.-2      	; 0x82c <__stop_program>
